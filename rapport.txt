Suivi de la formation: PLAN 


Résumé 1:

– Un IDE permet de simplifier le développement d’un projet dans son ensemble.
– Tomcat n’est pas un serveur d’applications Java EE au sens complet du terme.
– La configuration du serveur passe principalement par deux fichiers : server.xml et
web.xml.
– Une application web Java EE doit respecter une architecture bien définie.
– Eclipse modifie l’architecture des applications pour les intégrer correctement à son
système.


Résumé 2:

Le client envoie des requêtes au serveur grâce aux méthodes du protocole HTTP,
notamment GET, POST et HEAD.
– Le conteneur web place chaque requête reçue dans un objet HttpServletRequest,
et place chaque réponse qu’il initialise dans l’objet HttpServletResponse.
– Le conteneur transmet chaque couple requête/réponse à une servlet : c’est un objet
Java assigné à une requête et capable de générer une réponse en conséquence.
– La servlet est donc le point d’entrée d’une application web, et se déclare dans son
fichier de configuration web.xml.
– Une servlet peut se charger de répondre à une requête en particulier, ou à un groupe
entier de requêtes.
– Pour pouvoir traiter une requête HTTP de type GET, une servlet doit implémen-
ter la méthode doGet() ; pour répondre à une requête de type POST, la méthode
doPost() ; etc.
– Une servlet n’est pas chargée de l’affichage des données, elle ne doit donc pas s’oc-
cuper de la présentation (HTML, CSS, etc.).

Partie 1
************************************************************
************************************************************
- SERVLET

Résumé 1: 

Une page JSP ressemble en apparence à une page HTML, mais en réalité elle est
bien plus proche d’une servlet : elle contient des balises derrière lesquelles se cache
du code Java.
– Une page JSP est exécutée sur le serveur, et la page finale générée et envoyée au
client est une simple page HTML : le client ne voit pas le code de la JSP.
– Le répertoire /WEB-INF cache les fichiers qu’il contient à l’extérieur de l’application.
– La méthode forward() de l’objet RequestDispatcher permet depuis une servlet
de rediriger la paire requête/réponse HTTP vers une autre servlet ou vers une page
JSP.

- JSP  

– Les commentaires compris entre <%– et –%> ne sont pas visibles dans la page finale
générée.
– L’insertion directe de code Java dans une JSP est possible mais très déconseillée.
– Les directives se placent en début de fichier et permettent de configurer une JSP
sous différents angles.
– Il existe 4 portées d’objets différentes, représentant 4 durées de vie différentes : page,
request, session et application.
– Une session suit un visiteur de son arrivée sur le site jusqu’à son départ.
– Les actions standard permettent pour la plupart de manipuler des objets au sein
d’une JSP, mais sont aujourd’hui de l’histoire ancienne.





- JAVABEANS

– Un bean est un objet Java réutilisable qui représente une entité, et dont les données
sont représentées par des propriétés.
– Un bean est une classe publique et doit avoir au moins un constructeur par défaut,
public et sans paramètres.
– Une propriété d’un bean est un champ non public, qui doit être accessible à travers
un couple de getter/setter.
– Il faut configurer le build-path d’un projet web sous Eclipse pour qu’il y dépose
automatiquement les classes compilées depuis les codes sources Java de vos objets.
– Un bean peut par exemple être transmis d’une servlet vers une page JSP (ou une
autre servlet) en tant qu’attribut de requête.

-	EL 

- La technologie EL est fondée sur les JavaBeans et sur les collections Java, et existe depuis la version 2.4 de l'API Servlet.
- Les expressions EL remplacent les actions standard de manipulation des objets.
Une expression EL permet d'effectuer des tests, interprétés à la volée lors de l'exécution de la page.
- L'interprétation des expressions EL peut être désactivée via une section dans le fichier web.xml.
Un objet implicite n'est pas géré par le développeur, mais par le conteneur de servlets.
- Chaque objet implicite JSP donne accès à un objet mis à disposition par le conteneur.
- Chaque objet implicite EL est un raccourci vers des données de l'application.

Partie 2:
************************************************************
************************************************************
-JSTL

Partie 3 :
************************************************************
************************************************************
-Formulaires, sessions, cookies

Partie 4:
************************************************************
************************************************************
-JDBC, DAO

Partie 5:
************************************************************
************************************************************
- Annotations, JPA, MVC, JSF

Partie 6:
************************************************************
************************************************************
-Debugger un projet, empaquetage et déploiement d'un projet
